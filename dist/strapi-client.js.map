{"version":3,"file":"strapi-client.js","sources":["../src/lib/constants.ts","../src/lib/helpers/polyfills.ts","../src/lib/helpers/index.ts","../src/lib/strapi-client-helper.ts","../src/lib/strapi-auth-client.ts","../src/lib/service/http.ts","../src/lib/types/base.ts","../src/lib/strapi-filter-builder.ts","../src/lib/strapi-query-builder.ts","../src/lib/strapi-client.ts","../src/index.ts"],"sourcesContent":["export const STORAGE_KEY = 'strapi.auth.token';\n\nconst AuthUrl = {\n  signIn: '/auth/local',\n  signUp: '/auth/local/register',\n  getMe: '/users/me',\n};\n\nexport const EndPoint = {\n  auth: AuthUrl,\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-nocheck\n\n/**\n * https://mathiasbynens.be/notes/globalthis\n */\nexport function polyfillGlobalThis() {\n  if (typeof globalThis === 'object') return;\n  try {\n    Object.defineProperty(Object.prototype, '__magic__', {\n      get: function () {\n        return this;\n      },\n      configurable: true,\n    });\n    __magic__.globalThis = __magic__;\n    delete Object.prototype.__magic__;\n  } catch (e) {\n    if (typeof self !== 'undefined') {\n      self.globalThis = self;\n    }\n  }\n}\n","import { stringify, parse } from 'qs';\n\nexport function generateQueryString(obj: object): string {\n  return stringify(obj, { encodeValuesOnly: true });\n}\n\nexport function generateQueryFromRawString(rawQuery: string): string {\n  return stringify(parse(rawQuery), { encodeValuesOnly: true });\n}\n\nexport const isBrowser = () => typeof window !== 'undefined';\n\nexport const stringToArray = (value: string): string[] => {\n  return value.split('.');\n};\n","import { InferedTypeFromArray, StrapiApiError, StrapiApiResponse } from './types/base';\nimport { CrudFilter, CrudSorting, DeepFilterType, PopulateDeepOptions } from './types/crud';\nimport { parse, stringify } from 'qs';\nimport { generateQueryString, stringToArray } from './helpers';\n\nexport abstract class StrapiClientHelper<T> {\n  protected url: string;\n\n  constructor(url: string) {\n    this.url = url;\n  }\n\n  private _normalizeData(data: any): any {\n    const isObject = (data: any) => Object.prototype.toString.call(data) === '[object Object]';\n\n    const flatten = (data: any) => {\n      if (!data.attributes) return data;\n\n      return {\n        id: data.id,\n        ...data.attributes,\n      };\n    };\n\n    if (Array.isArray(data)) {\n      return data.map((item) => this._normalizeData(item));\n    }\n\n    if (isObject(data)) {\n      if (Array.isArray(data.data)) {\n        data = [...data.data];\n      } else if (isObject(data.data)) {\n        data = flatten({ ...data.data });\n      } else if (data.data === null) {\n        data = null;\n      } else {\n        data = flatten(data);\n      }\n\n      for (const key in data) {\n        data[key] = this._normalizeData(data[key]);\n      }\n\n      return data;\n    }\n\n    return data;\n  }\n\n  protected _returnDataHandler(data: StrapiApiResponse<T>): StrapiApiResponse<T> {\n    const response: StrapiApiResponse<T> = {\n      data: this._normalizeData(data.data) as T,\n      meta: data.meta,\n      error: data.error,\n    };\n    return response;\n  }\n\n  protected _returnErrorHandler(err: any): StrapiApiResponse<T> {\n    let error: StrapiApiError = {\n      status: null,\n      message: null,\n      details: null,\n      name: null,\n    };\n\n    if (err.code === 'ENOTFOUND' || err.syscall === 'getaddrinfo') {\n      error.status = err.code;\n      error.message = `The given url ${err.config.baseURL} is incorrect or invalid `;\n      error.name = err.syscall;\n    } else {\n      if (!err.response.data.error) {\n        error.status = err.response.status as number;\n        error.message = err.response.statusText;\n        error.name = err.response.data;\n      } else {\n        error = err.response.data.error as StrapiApiError;\n      }\n    }\n\n    const response: StrapiApiResponse<T> = {\n      data: null,\n      error,\n    };\n    return response;\n  }\n\n  protected _generateFilter({ field, operator, value }: CrudFilter<InferedTypeFromArray<T>>): string {\n    let rawQuery = '';\n    if (Array.isArray(value)) {\n      value.map((val) => {\n        rawQuery += `&filters[${String(field)}][$${operator}]=${val}`;\n      });\n    } else {\n      rawQuery += `&filters[${String(field)}][$${operator}]=${value}`;\n    }\n    const parsedQuery = parse(rawQuery);\n    return this._handleUrl(generateQueryString(parsedQuery));\n  }\n\n  protected _genrateRelationsFilter(deepFilter: DeepFilterType) {\n    let rawQuery = `filters`;\n    const { path: fields, operator, value } = deepFilter;\n    if (Array.isArray(fields)) {\n      fields.map((field) => {\n        rawQuery += `[${field}]`;\n      });\n    }\n\n    const partialQuery = rawQuery;\n\n    if (Array.isArray(value)) {\n      value.map((val, index) => {\n        if (index === 0) {\n          rawQuery += `[$${operator}]=${val}`;\n        } else {\n          rawQuery += `&${partialQuery}[$${operator}]=${val}`;\n        }\n      });\n    } else {\n      rawQuery += `[$${operator}]=${value}`;\n    }\n\n    const parsedQuery = parse(rawQuery);\n    return this._handleUrl(generateQueryString(parsedQuery));\n  }\n\n  protected _generateSort<T>(_sort: CrudSorting<T>): string {\n    const sort: string[] = [];\n    _sort.map((item) => {\n      if (item.order) {\n        sort.push(`${String(item.field)}:${item.order}`);\n      } else {\n        sort.push(`${String(item.field)}`);\n      }\n    });\n    return this._handleUrl(generateQueryString({ sort }));\n  }\n\n  protected _handleUrl(query: string): string {\n    const lastChar = this.url.charAt(this.url.length - 1);\n    const hasQuerySymbol = this.url.includes('?');\n    if (!hasQuerySymbol && lastChar !== '&') {\n      return `${this.url}?${query}`;\n    } else {\n      return `${this.url}&${query}`;\n    }\n  }\n\n  protected _generatePopulateDeep(options: PopulateDeepOptions[]) {\n    let url_string = '';\n    options.map((q) => {\n      const manipulatedPath = stringToArray(q.path);\n      let partialQuery = '';\n      if (Array.isArray(manipulatedPath)) {\n        manipulatedPath.map((path, i) => {\n          partialQuery += i === 0 ? `populate[${path}]` : `[populate][${path}]`;\n        });\n      }\n\n      if (q.fields) {\n        q.fields.map((field, i) => {\n          url_string +=\n            i === 0 && url_string === ''\n              ? `${partialQuery}[fields][${i}]=${field}`\n              : `&${partialQuery}[fields][${i}]=${field}`;\n        });\n      }\n\n      if (q.children === '*') {\n        url_string += `&${partialQuery}[populate]=%2A`;\n      }\n\n      if (q.children && q.children !== '*') {\n        const partialQuery2 = partialQuery;\n        let someQuery = '';\n        q.children.map((child) => {\n          if (!child.fields) {\n            url_string += `&${partialQuery2}[populate][${child.key}]=%2A`;\n          } else {\n            child.fields.map((field, ind) => {\n              someQuery += `&${partialQuery2}[populate][${child.key}][fields][${ind}]=${field}`;\n            });\n          }\n\n          url_string += `${someQuery}`;\n        });\n      }\n    });\n\n    return this._handleUrl(stringify(parse(url_string)));\n  }\n}\n","import { AxiosInstance } from 'axios';\nimport { StrapiApiError, StrapiApiResponse, StrapiClientOptions, SupportedStorage } from './types/base';\n\nimport { AuthData, Session, SignInCredentials, SignUpCredentials, User } from './types/auth';\n\nimport { EndPoint, STORAGE_KEY } from './constants';\nimport { polyfillGlobalThis } from './helpers/polyfills';\nimport { isBrowser } from './helpers';\nimport { StrapiClientHelper } from './strapi-client-helper';\n\npolyfillGlobalThis(); // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n};\n\nexport class StrapiAuthClient extends StrapiClientHelper<AuthData> {\n  private httpClient: AxiosInstance;\n\n  protected localStorage: SupportedStorage;\n  protected autoRefreshToken: boolean;\n  protected persistSession: boolean;\n\n  /**\n   * The currently logged in user or null.\n   */\n  protected currentUser: User | null;\n  /**\n   * The session object for the currently logged in user or null.\n   */\n  protected currentSession: Session | null;\n\n  constructor(axiosInstance: AxiosInstance, options: StrapiClientOptions) {\n    const settings = { ...DEFAULT_OPTIONS, ...options };\n    super(settings.url);\n    this.httpClient = axiosInstance;\n    this.currentUser = null;\n    this.currentSession = null;\n    this.autoRefreshToken = settings.autoRefreshToken;\n    this.persistSession = settings.persistSession;\n    this.localStorage = settings.localStorage || globalThis.localStorage;\n  }\n\n  /**\n   *\n   * @param credentials email and password\n   * @returns data and error objects, data object contains jwt, user and provider\n   */\n  public signIn(credentials: SignInCredentials): Promise<StrapiApiResponse<AuthData>> {\n    return new Promise<StrapiApiResponse<AuthData>>((resolve) => {\n      this.httpClient\n        .post<AuthData>(EndPoint.auth.signIn, {\n          identifier: credentials.email,\n          password: credentials.password,\n        })\n        .then((res) => {\n          this._saveSession({\n            access_token: res.data.jwt,\n            user: res.data.user,\n          });\n          resolve({\n            data: res.data,\n          });\n        })\n        .catch((err) => {\n          if (err) {\n            return resolve(this._returnErrorHandler(err));\n          }\n        });\n    });\n  }\n\n  /**\n   *\n   * @param credentials object contains username, email and password\n   * @returns data and error objects, data object contains jwt, user and provider\n   */\n\n  public async signUp(credentials: SignUpCredentials): Promise<StrapiApiResponse<AuthData>> {\n    return new Promise<StrapiApiResponse<AuthData>>((resolve) => {\n      this.httpClient\n        .post<AuthData>(EndPoint.auth.signUp, credentials)\n        .then((res) => {\n          resolve({ data: res.data });\n          this._saveSession({\n            access_token: res.data.jwt,\n            user: res.data.user,\n          });\n        })\n        .catch((err) => {\n          if (err) {\n            if (err) {\n              return resolve(this._returnErrorHandler(err));\n            }\n          }\n        });\n    });\n  }\n\n  /**\n   *\n   * @returns Get the user object by JWT token\n   */\n  public async getMe(): Promise<StrapiApiResponse<User>> {\n    return new Promise<StrapiApiResponse<User>>((resolve) => {\n      this.httpClient\n        .get<User>(EndPoint.auth.getMe)\n        .then((res) => {\n          resolve({ data: res.data });\n        })\n        .catch((err: any) => {\n          if (err) {\n            const error = err.response.data.error as StrapiApiError;\n            return resolve({\n              data: null,\n              error,\n            });\n          }\n        });\n    });\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a \"SIGNED_OUT\" event.\n   *\n   * For server-side management, you can disable sessions by passing a JWT through to `auth.api.signOut(JWT: string)`\n   */\n  async signOut(): Promise<{ error: StrapiApiError | null }> {\n    const accessToken = this.currentSession?.access_token;\n    this._removeSession();\n    if (accessToken) {\n      // const { error } = await this.api.signOut(accessToken);\n      //  if (error) return { error };\n    }\n    return { error: null };\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private _saveSession(session: Session) {\n    this.currentSession = session;\n    this.currentUser = session.user;\n    if (this.persistSession) {\n      this._persistSession(this.currentSession);\n    }\n  }\n\n  private async _removeSession() {\n    this.currentSession = null;\n    this.currentUser = null;\n    //  if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n    isBrowser() && (await this.localStorage.removeItem(STORAGE_KEY));\n  }\n\n  private _persistSession(currentSession: Session) {\n    const data = { currentSession, expiresAt: currentSession.expires_at };\n    isBrowser() && this.localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  }\n}\n","import axios, { AxiosRequestConfig, AxiosInstance } from 'axios';\n\nexport const getAxiosInstance = (url: string, apiToken?: string): AxiosInstance => {\n  const API = axios.create();\n\n  API.defaults.baseURL = url;\n\n  const axiosConfig = (config: AxiosRequestConfig): AxiosRequestConfig => {\n    if (apiToken) {\n      config.headers = {\n        Authorization: `Bearer ${apiToken}`,\n      };\n    }\n    return config;\n  };\n\n  API.interceptors.request.use(axiosConfig as any);\n\n  return API;\n};\n","export interface StrapiApiError {\n  message: string | null;\n  status: number | null;\n  name: string | null;\n  details: any | null;\n}\n\nexport type StrapiClientOptions = {\n  url: string;\n  debug?: boolean;\n  normalizeData?: boolean;\n  apiToken?: string;\n  headers?: { [key: string]: string };\n  persistSession?: boolean;\n  localStorage?: SupportedStorage;\n};\n\ntype StrapiPagination = {\n  page: number;\n  pageSize: number;\n  pageCount: number;\n  total: number;\n};\n\nexport type Meta = {\n  pagination: StrapiPagination;\n};\n\nexport type StrapiApiResponse<T> = {\n  data: T | null;\n  error?: StrapiApiError;\n  meta?: Meta;\n};\n\nexport enum PublicationState {\n  LIVE = 'live',\n  PREVIEW = 'preview',\n}\n\nexport type StrapiUnifiedResponse<T> = {\n  id: number | string;\n  attributes: T;\n};\n\nexport type InferedTypeFromArray<T> = T extends Array<infer U> ? U : T;\n\nexport type StrapiPopulatedResponse<T> = {\n  data: T extends Array<infer U> ? Array<StrapiUnifiedResponse<U>> : StrapiUnifiedResponse<T>;\n};\n\nexport type StrapiTimestamp = {\n  createdAt: string;\n  updatedAt: string;\n  publishedAt: string;\n};\n\nexport type StrapiLocalization = {\n  locale: string;\n  localizations?: Array<any>;\n};\n\n// Persist Token in LocalStorage\ntype AnyFunction = (...args: any[]) => any;\ntype MaybePromisify<T> = T | Promise<T>;\n\ntype PromisifyMethods<T> = {\n  [K in keyof T]: T[K] extends AnyFunction ? (...args: Parameters<T[K]>) => MaybePromisify<ReturnType<T[K]>> : T[K];\n};\n\nexport type SupportedStorage = PromisifyMethods<Pick<Storage, 'getItem' | 'setItem' | 'removeItem'>>;\n","import { AxiosInstance } from 'axios';\nimport { generateQueryString, generateQueryFromRawString, stringToArray } from './helpers';\nimport { StrapiClientHelper } from './strapi-client-helper';\nimport { InferedTypeFromArray, PublicationState, StrapiApiResponse } from './types/base';\nimport { CrudSorting, PopulateDeepOptions, RelationalFilterOperators } from './types/crud';\n\nexport class StrapiFilterBuilder<T> extends StrapiClientHelper<T> {\n  private httpClient: AxiosInstance;\n  private normalizeData: boolean;\n  private debug: boolean;\n\n  constructor(\n    url: string,\n    axiosInstance: AxiosInstance,\n    normalizeData: boolean,\n    debug: boolean,\n    private isNotUserContent: boolean\n  ) {\n    super(url);\n    this.debug = debug;\n    this.url = url;\n    this.httpClient = axiosInstance;\n    this.normalizeData = normalizeData;\n  }\n\n  async get(): Promise<StrapiApiResponse<T>> {\n    if (this.debug) {\n      // eslint-disable-next-line no-console\n      console.log(this.url);\n    }\n    return new Promise<StrapiApiResponse<T>>((resolve) => {\n      if (this.isNotUserContent) {\n        this.httpClient\n          .get<StrapiApiResponse<T>>(this.url)\n          .then((res) => {\n            resolve(this.normalizeData ? this._returnDataHandler(res.data) : res.data);\n          })\n          .catch((err) => {\n            if (err) {\n              resolve(this._returnErrorHandler(err));\n            }\n          });\n      }\n      if (!this.isNotUserContent) {\n        this.httpClient\n          .get<T>(this.url)\n          .then((res) => {\n            resolve({ data: res.data, meta: undefined });\n          })\n          .catch((err) => {\n            if (err) {\n              resolve(this._returnErrorHandler(err));\n            }\n          });\n      }\n    });\n  }\n\n  equalTo(field: keyof InferedTypeFromArray<T>, value: string | number) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'eq',\n      value,\n    });\n    return this;\n  }\n\n  notEqualTo(field: keyof InferedTypeFromArray<T>, value: string | number) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'ne',\n      value,\n    });\n    return this;\n  }\n\n  lessThan(field: keyof InferedTypeFromArray<T>, value: string | number) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'lt',\n      value,\n    });\n    return this;\n  }\n\n  lessThanOrEqualTo(field: keyof InferedTypeFromArray<T>, value: string | number) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'lte',\n      value,\n    });\n    return this;\n  }\n\n  greaterThan(field: keyof InferedTypeFromArray<T>, value: string | number) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'gt',\n      value,\n    });\n    return this;\n  }\n\n  greaterThanOrEqualTo(field: keyof InferedTypeFromArray<T>, value: string | number) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'gte',\n      value,\n    });\n    return this;\n  }\n\n  containsCaseSensitive(field: keyof InferedTypeFromArray<T>, value: string) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'contains',\n      value,\n    });\n    return this;\n  }\n\n  notContainsCaseSensitive(field: keyof InferedTypeFromArray<T>, value: string) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'notContains',\n      value,\n    });\n    return this;\n  }\n\n  contains(field: keyof InferedTypeFromArray<T>, value: string) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'containsi',\n      value,\n    });\n    return this;\n  }\n\n  notContains(field: keyof InferedTypeFromArray<T>, value: string) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'notContainsi',\n      value,\n    });\n    return this;\n  }\n\n  isNull(field: keyof InferedTypeFromArray<T>, value: string) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'null',\n      value,\n    });\n    return this;\n  }\n\n  isNotNull(field: keyof InferedTypeFromArray<T>, value: string) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'notNull',\n      value,\n    });\n    return this;\n  }\n\n  between(field: keyof InferedTypeFromArray<T>, value: Array<any>) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'between',\n      value,\n    });\n    return this;\n  }\n\n  startsWith(field: keyof InferedTypeFromArray<T>, value: string) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'startsWith',\n      value,\n    });\n    return this;\n  }\n\n  endsWith(field: keyof InferedTypeFromArray<T>, value: string) {\n    this.url = this._generateFilter({\n      field,\n      operator: 'endsWith',\n      value,\n    });\n    return this;\n  }\n\n  /**\n   *\n   * @param path relation path as string type.  Ex - 'subcategories.products.slug'\n   * @param operator \"eq\" | \"ne\" | \"lt\" | \"gt\" | \"lte\" | \"gte\" | \"in\" | \"notIn\" | \"contains\" | \"notContains\" | \"startsWith\" | \"endsWith\"\n   * @param value values can be string, number or array\n   * @returns\n   */\n  filterDeep(path: string, operator: RelationalFilterOperators, value: string | number | Array<string | number>) {\n    this.url = this._genrateRelationsFilter({ path: stringToArray(path), operator, value });\n    return this;\n  }\n\n  /**\n   *\n   * @param sort expects an array with the field and order example - [{ field: 'id', order: 'asc' }]\n   *\n   */\n  sortBy(sort: CrudSorting<InferedTypeFromArray<T>>) {\n    this.url = this._generateSort(sort);\n    return this;\n  }\n\n  /**\n   *\n   * @param page Page number\n   * @param pageSize \tPage size\n   * @returns Pagination by page\n   */\n  paginate(page: number, pageSize: number) {\n    const paginateRawQuery = `pagination[page]=${page}&pagination[pageSize]=${pageSize}`;\n    this.url = this._handleUrl(generateQueryFromRawString(paginateRawQuery));\n    return this;\n  }\n\n  /**\n   *\n   * @param start Start value (i.e. first entry to return)\n   * @param limit Number of entries to return\n   * @returns Pagination by offset\n   */\n  paginateByOffset(start: number, limit: number) {\n    const paginateRawQuery = `pagination[start]=${start}&pagination[limit]=${limit}`;\n    this.url = this._handleUrl(generateQueryFromRawString(paginateRawQuery));\n    return this;\n  }\n\n  /**\n   *\n   * @returns returns both draft entries & published entries\n   */\n  withDraft() {\n    this.url = this._handleUrl(`publicationState=${PublicationState.PREVIEW}`);\n    return this;\n  }\n\n  /**\n   *\n   * @returns retrieve only draft entries\n   */\n  onlyDraft() {\n    this.url = this._handleUrl(`publicationState=${PublicationState.PREVIEW}&filters[publishedAt][$null]=true`);\n    return this;\n  }\n\n  /**\n   *\n   * @param localeCode expects string locale-code\n   * @returns returns content only for a specified locale\n   */\n  setLocale(localeCode: string) {\n    this.url = this._handleUrl(`locale=${localeCode}`);\n    return this;\n  }\n\n  /**\n   *\n   * @returns Populate 1 level for all relations\n   */\n  populate() {\n    const obj = {\n      populate: '*',\n    };\n    this.url = this._handleUrl(generateQueryString(obj));\n    return this;\n  }\n\n  /**\n   * @param key relation name\n   * @param selectFields an Array of field names to populate\n   * @param level2 expects boolean value to To populate second-level deep for all relations\n   */\n\n  populateWith<Q>(\n    relation: T extends Array<infer U> ? keyof U : keyof T,\n    selectFields?: Array<keyof Q>,\n    level2?: boolean\n  ) {\n    const obj = {\n      populate: {\n        [relation]: {\n          fields: selectFields,\n          populate: level2 ? '*' : null,\n        },\n      },\n    };\n    this.url = this._handleUrl(generateQueryString(obj));\n    return this;\n  }\n\n  /**\n   *\n   * @param populateDeepValues expects an array with the path, fields and children\n   * @type path: string\n   *\n   * @type fields: Array of strings\n   * \n   * @type children : Array [key:string, fields:Array of strings]\n  \n   * @returns Populate n level for the specified relation\n   */\n  populateDeep(populateDeepValues: PopulateDeepOptions[]) {\n    this.url = this._generatePopulateDeep(populateDeepValues);\n    return this;\n  }\n}\n","import { AxiosInstance } from 'axios';\nimport { generateQueryString } from './helpers';\nimport { StrapiClientHelper } from './strapi-client-helper';\nimport { StrapiFilterBuilder } from './strapi-filter-builder';\nimport { StrapiApiResponse } from './types/base';\n\ntype PostValuesType<T> = {\n  data: T;\n};\nexport class StrapiQueryBuilder<T> extends StrapiClientHelper<T> {\n  private httpClient: AxiosInstance;\n  private isNotUserContent: boolean;\n  protected normalizData: boolean;\n  private debug: boolean;\n  constructor(\n    url: string,\n    axiosInstance: AxiosInstance,\n    isNotUserContent: boolean,\n    normalizeData: boolean,\n    debug: boolean\n  ) {\n    super(url);\n    this.debug = debug;\n    this.normalizData = normalizeData;\n    this.url = `${url}`;\n    this.isNotUserContent = isNotUserContent;\n    this.httpClient = axiosInstance;\n  }\n\n  /**\n   *\n   * @param fields Array of string to select the fields.\n   * @returns collection of requested contents.\n   */\n\n  select(fields?: Array<keyof T>): StrapiFilterBuilder<T[]> {\n    if (fields) {\n      const query = {\n        fields,\n      };\n      const queryString = generateQueryString(query);\n      this.url = `${this.url}?${queryString}`;\n    }\n\n    return new StrapiFilterBuilder<T[]>(\n      this.url,\n      this.httpClient,\n      this.normalizData,\n      this.debug,\n      this.isNotUserContent\n    );\n  }\n\n  /**\n   *\n   * @param ids Array of string or number values to select many records.\n   * @returns selected contents.\n   */\n  selectManyByID(ids: string[] | number[]): StrapiFilterBuilder<T[]> {\n    if (ids) {\n      const query = ids?.map((item: string | number) => `filters[id][$in]=${item}`).join('&');\n\n      this.url = `${this.url}?${query}`;\n    }\n\n    return new StrapiFilterBuilder<T[]>(\n      this.url,\n      this.httpClient,\n      this.normalizData,\n      this.debug,\n      this.isNotUserContent\n    );\n  }\n\n  /**\n   *\n   * @param values The values to create a new record.\n   * @returns By default the new record is returned.\n   */\n  async create(values: T): Promise<StrapiApiResponse<T>> {\n    return new Promise<StrapiApiResponse<T>>((resolve) => {\n      this.httpClient\n        .post<StrapiApiResponse<T>>(this.url, this._handleValues(values))\n        .then((res) => {\n          resolve(this.normalizData ? this._returnDataHandler(res.data) : res.data);\n        })\n        .catch((err) => {\n          if (err) {\n            resolve(this._returnErrorHandler(err));\n          }\n        });\n    });\n  }\n\n  /**\n   *\n   * @param values objects of values to create many records.\n   * @returns return boolean value if the process on success\n   */\n  async createMany(values: T[]): Promise<{ success: true }> {\n    await Promise.all(\n      values.map(async (value): Promise<StrapiApiResponse<T>> => {\n        const { data } = await this.httpClient.post<StrapiApiResponse<T>>(this.url, this._handleValues(value));\n        return Promise.resolve(data);\n      })\n    ).catch((error) => {\n      if (error) {\n        this._returnErrorHandler(error);\n      }\n    });\n    return Promise.resolve({\n      success: true,\n    });\n  }\n\n  /**\n   *\n   * @param values The values to update an existing record.\n   * @returns By default the new record is returned.\n   */\n  async update(id: string | number, values: Partial<T>): Promise<StrapiApiResponse<T>> {\n    const url = `${this.url}/${id}`;\n    return new Promise<StrapiApiResponse<T>>((resolve) => {\n      this.httpClient\n        .put<StrapiApiResponse<T>>(url, this._handleValues(values))\n        .then((res) => {\n          resolve(this.normalizData ? this._returnDataHandler(res.data) : res.data);\n        })\n        .catch((err) => {\n          if (err) {\n            resolve(this._returnErrorHandler(err));\n          }\n        });\n    });\n  }\n\n  /**\n   *\n   * @param values objects of values to update many records.\n   * @returns return boolean value if the process on success\n   */\n  async updateMany(values: { id: string | number; variables: Partial<T> }[]): Promise<{ success: true }> {\n    await Promise.all(\n      values.map(async (value): Promise<StrapiApiResponse<T>> => {\n        const url = `${this.url}/${value.id}`;\n\n        const { data } = await this.httpClient.put<StrapiApiResponse<T>>(url, this._handleValues(value.variables));\n        return Promise.resolve(data);\n      })\n    ).catch((error) => {\n      if (error) {\n        this._returnErrorHandler(error);\n      }\n    });\n    return Promise.resolve({\n      success: true,\n    });\n  }\n\n  /**\n   *\n   * @param value The value to delete an record.\n   * @returns By default the deleted record is returned.\n   */\n  async deleteOne(id: string | number): Promise<StrapiApiResponse<T>> {\n    const url = `${this.url}/${id}`;\n    return new Promise<StrapiApiResponse<T>>((resolve) => {\n      this.httpClient\n        .delete<StrapiApiResponse<T>>(url)\n        .then((res) => {\n          resolve(res.data);\n        })\n        .catch((err) => {\n          if (err) {\n            resolve(this._returnErrorHandler(err));\n          }\n        });\n    });\n  }\n\n  /**\n   *\n   * @param values Array of string or number values to delete many records.\n   * @returns return boolean value if the process on success\n   */\n  async deleteMany(ids: string[] | number[]): Promise<{ success: true }> {\n    await Promise.all(\n      ids.map(async (id) => {\n        const { data } = await this.httpClient.delete(`${this.url}/${id}`);\n        return data;\n      })\n    ).catch((err) => {\n      if (err) {\n        return this._returnErrorHandler(err);\n      }\n    });\n\n    return Promise.resolve({\n      success: true,\n    });\n  }\n\n  private _handleValues(values: Partial<T>): Partial<T> | PostValuesType<Partial<T>> {\n    if (this.isNotUserContent) {\n      const dataValues: PostValuesType<Partial<T>> = {\n        data: values,\n      };\n      return dataValues;\n    } else {\n      return values;\n    }\n  }\n}\n","import { AxiosInstance } from 'axios';\nimport { StrapiAuthClient } from './strapi-auth-client';\nimport { getAxiosInstance } from './service/http';\nimport { StrapiClientOptions } from './types/base';\nimport { StrapiQueryBuilder } from './strapi-query-builder';\n\nexport class StrapiClient {\n  private httpClient: AxiosInstance;\n  private options: StrapiClientOptions;\n  private isNotUserContent: boolean;\n  private normalizeData: boolean;\n  private debug: boolean;\n\n  constructor(options: StrapiClientOptions) {\n    this.debug = options.debug || false;\n    this.httpClient = getAxiosInstance(options.url, options.apiToken);\n    this.auth = this._initStrapiAuthClient(this.httpClient);\n    this.normalizeData = options.normalizeData ? options.normalizeData : false;\n    this.options = options;\n    this.isNotUserContent = true;\n  }\n\n  auth: StrapiAuthClient;\n\n  /**\n   * Perform a model operation.\n   *\n   * @param name The model name to operate on.\n   */\n  from<T = any>(contentName: string): StrapiQueryBuilder<T> {\n    contentName === 'users' ? (this.isNotUserContent = false) : (this.isNotUserContent = true);\n    const url = `${this.options.url}/${contentName}`;\n    return new StrapiQueryBuilder<T>(url, this.httpClient, this.isNotUserContent, this.normalizeData, this.debug);\n  }\n\n  /**\n   *\n   * @returns The registered Api URL\n   */\n  getApiUrl(): string {\n    return this.options.url;\n  }\n\n  setToken(token: string): void {\n    this.httpClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  }\n\n  removeToken(): void {\n    delete this.httpClient.defaults.headers.common['Authorization'];\n  }\n\n  private _initStrapiAuthClient(axiosInstance: AxiosInstance) {\n    return new StrapiAuthClient(axiosInstance, this.options);\n  }\n}\n","import { StrapiClient } from './lib/strapi-client';\nimport { StrapiClientOptions } from './lib/types/base';\n\nconst defaultOptions: StrapiClientOptions = {\n  url: '',\n  normalizeData: true,\n};\n\n/**\n * Strapi Client Options Object\n *\n * @param url Strapi application url\n *\n * @param apiToken Authorized Api Token\n *\n * @param normalizeData Disables Unified response format. default - true\n *\n * @param headers custom headers\n *\n * @param debug Query log on development. default - false\n *\n * @param persistSession Using browser localstorage to save the current session. default- flase\n *\n */\nconst createClient = (options: StrapiClientOptions): StrapiClient => {\n  return new StrapiClient({ ...defaultOptions, ...options });\n};\n\nexport { createClient, StrapiClient };\nexport type {\n  StrapiUnifiedResponse,\n  StrapiTimestamp,\n  StrapiPopulatedResponse,\n  StrapiClientOptions,\n} from './lib/types/base';\nexport type { SignInCredentials, SignUpCredentials } from './lib/types/auth';\nexport type { StrapiImage } from './lib/types/image';\n"],"names":["stringify","parse","data","axios","PublicationState"],"mappings":"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"}